📄 ApiCashLoop - Gerenciamento de Reembolsos
Node.js
TypeScript
Prisma
JWT

ApiCashLoop é uma solução robusta e segura para gerenciamento de solicitações de reembolso, desenvolvida com tecnologias modernas para garantir desempenho e escalabilidade.

✨ Funcionalidades Principais
Autenticação Segura com JWT

Controle de Acesso baseado em roles

CRUD Completo para solicitações de reembolso

Validação de Dados com Zod

Filtros Inteligentes para consultas

Tipagem Estática com TypeScript

🛠️ Tecnologias Utilizadas
Tecnologia	Descrição
Node.js	Ambiente de execução JavaScript server-side
Express	Framework web rápido e minimalista
TypeScript	JavaScript com sintaxe para tipos
Prisma	ORM moderno para banco de dados
Zod	Validação de esquemas TypeScript-first
JWT	Autenticação stateless segura
🏗️ Estrutura do Projeto
Copy
apicashloop/
├── src/
│   ├── config/          # Configurações da aplicação
│   ├── controllers/     # Lógica dos endpoints
│   ├── middlewares/     # Interceptores de requisição
│   ├── routes/          # Definição de rotas
│   ├── utils/           # Utilitários e helpers
│   └── database/        # Configuração do Prisma
├── .env                 # Variáveis de ambiente
└── package.json         # Dependências e scripts
🔐 Autenticação
A API utiliza JWT (JSON Web Tokens) para autenticação. Todos os endpoints protegidos requerem o header:

http
Copy
Authorization: Bearer <token>
📝 Exemplo de Uso
Criando um Reembolso
Requisição:

http
Copy
POST /refunds
Content-Type: application/json
Authorization: Bearer <your_token>

{
  "name": "Viagem à conferência",
  "category": "accommodation",
  "amount": 1200.50,
  "filename": "hotel_invoice_12345.pdf"
}
Resposta:

json
Copy
{
  "id": "clxyz123abc456",
  "name": "Viagem à conferência",
  "category": "accommodation",
  "amount": 1200.5,
  "filename": "hotel_invoice_12345.pdf",
  "userId": "user123",
  "createdAt": "2023-10-15T14:30:00.000Z"
}
Listando Reembolsos
Requisição:

http
Copy
GET /refunds?name=conferência
Authorization: Bearer <your_token>
Resposta:

json
Copy
[
  {
    "id": "clxyz123abc456",
    "name": "Viagem à conferência",
    "category": "accommodation",
    "amount": 1200.5,
    "filename": "hotel_invoice_12345.pdf",
    "createdAt": "2023-10-15T14:30:00.000Z",
    "user": {
      "id": "user123",
      "name": "João Silva",
      "email": "joao@empresa.com"
    }
  }
]
🚀 Como Executar
Clone o repositório:

bash
Copy
git clone https://github.com/seu-usuario/apicashloop.git
cd apicashloop
Instale as dependências:

bash
Copy
npm install
Configure o ambiente:

bash
Copy
cp .env.example .env
# Edite o .env com suas configurações
Execute as migrações do banco:

bash
Copy
npx prisma migrate dev
Inicie o servidor:

bash
Copy
npm run dev
📊 Modelo de Dados
prisma
Copy
model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  role     String
  refunds  Refund[]
}

model Refund {
  id        String   @id @default(uuid())
  name      String
  category  String
  amount    Float
  filename  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
🤝 Contribuição
Contribuições são bem-vindas! Siga os passos:

Faça um fork do projeto

Crie sua branch (git checkout -b feature/AmazingFeature)

Commit suas mudanças (git commit -m 'Add some AmazingFeature')

Push para a branch (git push origin feature/AmazingFeature)

Abra um Pull Request

📄 Licença
Distribuído sob a licença MIT. Veja LICENSE para mais informações.